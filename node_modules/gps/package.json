{
  "_from": "gps",
  "_id": "gps@0.5.3",
  "_inBundle": false,
  "_integrity": "sha512-uwOKGF+8cF9L++7WTtBH7fM+WiyJKyOmgl3yw0E/xeTIklzK4Nssw+dC/6CrCcsrZrrDWl8Wt5GRrjqjygIGiQ==",
  "_location": "/gps",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gps",
    "fetchSpec": "latest",
    "name": "gps",
    "raw": "gps",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/gps/-/gps-0.5.3.tgz",
  "_shasum": "daa52e61da5f7c8eb694799205c5c910c687e178",
  "_spec": "gps",
  "_where": "/workspace/goorm-test-container",
  "author": {
    "email": "robert@xarg.org",
    "name": "Robert Eisele",
    "url": "http://www.xarg.org/"
  },
  "bugs": {
    "url": "https://github.com/infusion/GPS.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A GPS NMEA parser library",
  "devDependencies": {
    "angles": "^0.2.0",
    "byline": "^5.0.0",
    "chai": "^4.1.0",
    "express": "^4.16.4",
    "kalman": "0.0.2",
    "mocha": "^5.2.0",
    "serialport": "^7.1.1",
    "socket.io": "^2.0.3",
    "sylvester": "0.0.21"
  },
  "directories": {
    "example": "examples",
    "test": "tests"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://www.xarg.org/2016/07/using-gps-with-node-js-and-javascript/",
  "keywords": [
    "distance",
    "geo",
    "gga",
    "gll",
    "glonass",
    "gps",
    "gsa",
    "gva",
    "hdt",
    "location",
    "nmea",
    "parser",
    "rmc",
    "serial",
    "stream",
    "vtg"
  ],
  "license": "MIT OR GPL-2.0",
  "main": "gps.js",
  "name": "gps",
  "optionalDependencies": {},
  "private": false,
  "readme": "\n![GPS.js](https://github.com/infusion/GPS.js/blob/master/res/logo.png?raw=true \"Javascript GPS Parser\")\n\n[![NPM Package](https://img.shields.io/npm/v/gps.svg?style=flat)](https://npmjs.org/package/gps \"View this project on npm\")\n[![Build Status](https://travis-ci.org/infusion/GPS.js.svg?branch=master)](https://travis-ci.org/infusion/GPS.js)\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\nGPS.js is an extensible parser for [NMEA](http://www.gpsinformation.org/dale/nmea.htm) sentences, given by any common GPS receiver. The output is tried to be as high-level as possible to make it more useful than simply splitting the information. The aim is, that you don't have to understand NMEA, just plug in your receiver and you're ready to go.\n\n\nUsage\n===\n\nThe interface of GPS.js is as simple as the following few lines. You need to add an event-listener for the completion of the task and invoke the update method with a sentence you want to process. There are much more examples in the examples folder.\n\n```javascript\nvar gps = new GPS;\n\n// Add an event listener on all protocols\ngps.on('data', function(parsed) {\n    console.log(parsed);\n});\n\n// Call the update routine directly with a NMEA sentence, which would\n// come from the serial port or stream-reader normally\ngps.update(\"$GPGGA,224900.000,4832.3762,N,00903.5393,E,1,04,7.8,498.6,M,48.0,M,,0000*5E\");\n```\n\nIt's also possible to add event-listeners only on one of the following protocols, by stating `gps.on('GGA', ...)` for example.\n\nState\n===\n\nThe real advantage over other NMEA implementations is, that the GPS information is interpreted and normalized. The most high-level API is the state object, which changes with every new event. You can use this information with:\n\n```javascript\ngps.on('data', function() {\n  console.log(gps.state);\n});\n```\n\nInstallation\n===\nInstalling GPS.js is as easy as cloning this repo or use the following command:\n\n```\nnpm install gps\n```\n\nFind the serial device\n===\n\nOn Linux serial devices typically have names like `/dev/ttyS1`, on OSX `/dev/tty.usbmodem1411` after installing a USB to serial driver and on Windows, you're probably fine by using the highest COM device you can find in the device manager. Please note that if you have multople USB ports on your computer and use them randomly, you have to lookup the path/device again.\n\nRegister device on a BeagleBone\n---\n\nIf you find yourself on a BeagleBone, the serial device must be registered manually. Luckily, this can be done within node quite easily using [octalbonescript](https://www.npmjs.com/package/octalbonescript):\n\n```javascript\nvar obs = require('octalbonescript');\nobs.serial.enable('/dev/ttyS1', function() {  \n    console.log('serial device activated');\n});\n```\n\nExamples\n===\n\nGPS.js comes with some examples, like drawing the current latutude and longitude to Google Maps, displaying a persistent state and displaying the parsed raw data. In some cases you have to adjust the serial path to your own GPS receiver to make it work.\n\nSimple serial example\n---\n\n```javascript\nvar SerialPort = require('serialport');\nvar port = new SerialPort.SerialPort('/dev/tty.usbserial', { // change path\n  baudrate: 4800,\n  parser: SerialPort.parsers.readline('\\r\\n')\n});\n\nvar GPS = require('gps');\nvar gps = new GPS;\n\ngps.on('data', function(data) {\n  console.log(data, gps.state);\n});\n\nport.on('data', function(data) {\n  gps.updatePartial(data);\n});\n```\n\nDashboard\n---\nGo into the folder `examples/dashboard` and start the server with\n\n```\nnode server\n```\n\nAfter that you can open the browser and go to http://localhost:3000. The result should look like the following, which in principle is just a visualiziation of the state object `gps.state`\n\n![GPS TU Dresden](https://github.com/infusion/GPS.js/blob/master/res/dashboard.png?raw=true)\n\nGoogle Maps\n---\nGo into the folder `examples/maps` and start the server with\n\n```\nnode server\n```\n\nAfter that you can open the browser and go to http://localhost:3000 The result should look like\n\n![GPS Google Maps Dresden](https://github.com/infusion/GPS.js/blob/master/res/maps.png?raw=true)\n\nConfluence\n---\n[Confluence](http://www.confluence.org/) is a project, which tries to travel to and document all integer GPS coordinates. GPS.js can assist on that goal. Go into the examples folder and run:\n\n```\nnode confluence\n```\n\nYou should see something like the following, updating as you move around\n\n```\nYou are at (48.53, 9.05951),\nThe closest confluence point (49, 9) is in 51.36 km.\nYou have to go 355.2Â° N\n```\n\nSet Time\n---\nOn systems without a RTC - like Raspberry PI - you need to update the time yourself at runtime. If the device has an internet connection, it's quite easy to use an NTP server. An alternative for disconnected projects with access to a GPS receiver can be the high-precision time signal, sent by satellites. Go to the examples folder and run the following to update the time:\n\n```\nnode set-date\n```\n\nAvailable Methods\n===\n\nupdate(line)\n---\nThe update method is the most important function, it parses a NMEA sentence and forces the callbacks to trigger\n\nupdatePartial(chunk)\n---\nWill call `update()` when a full NMEA sentence has been arrived\n\non(event, callback)\n---\nAdds an event listener for a protocol to occur (see implemented protocols, simply use the name - upper case) or for all sentences with `data`. Because GPS.js should be more general, it doesn't inherit `EventEmitter`, but simply invokes the callback.\n\noff(event)\n---\nRemoves an event listener\n\nImplemented Protocols\n===\n\nGGA - Fix information\n---\nGets the data, you're most probably looking for: *latitude and longitude*\n\nThe parsed object will have the following attributes:\n\n- type: \"GGA\"\n- time: The time given as a JavaScript Date object\n- lat: The latitude\n- lon: The longitude\n- alt: The altitude\n- quality: Fix quality (either invalid, fix or diff)\n- satellites: Number of satellites being tracked\n- hdop: Horizontal [dilution of precision](https://en.wikipedia.org/wiki/Dilution_of_precision_(GPS))\n- geoidal: Height of geoid in meters (mean sea level)\n- age: time in seconds since last DGPS update\n- stationID: DGPS station ID number\n- valid: Indicates if the checksum is okay\n\nRMC - NMEAs own version of essential GPS data\n---\nSimilar to GGA but gives also delivers the velocity\n\nThe parsed object will have the following attributes:\n\n- type: \"RMC\"\n- time: The time given as a JavaScript Date object\n- status: Status active or void\n- lat: The latitude\n- lon: The longitude\n- speed: Speed over the ground in km/h\n- track: Track angle in degrees\n- variation: Magnetic Variation\n- faa: The FAA mode, introduced with NMEA 2.3\n- valid: Indicates if the checksum is okay\n\n\nGSA - Active satellites\n---\nThe parsed object will have the following attributes:\n\n- type: \"GSA\"\n- mode: Auto selection of 2D or 3D fix (either auto or manual)\n- fix: The selected fix mode (either 2D or 3D)\n- satellites: Array of satellite IDs\n- pdop: Position [dilution of precision](https://en.wikipedia.org/wiki/Dilution_of_precision_(GPS))\n- vdop: Vertical [dilution of precision](https://en.wikipedia.org/wiki/Dilution_of_precision_(GPS))\n- hdop: Horizontal [dilution of precision](https://en.wikipedia.org/wiki/Dilution_of_precision_(GPS))\n- valid: Indicates if the checksum is okay\n\nGLL - Geographic Position - Latitude/Longitude\n---\nThe parsed object will have the following attributes:\n\n- type: \"GLL\"\n- lat: The latitude\n- lon: The longitude\n- status: Status active or void\n- time: The time given as a JavaScript Date object\n- valid: Indicates if the checksum is okay\n\nGSV - List of Satellites in view\n---\nGSV messages are paginated. `msgNumber` indicates the current page and `msgsTotal` is the total number of pages.\n\nThe parsed object will have the following attributes:\n\n- type: \"GSV\"\n- msgNumber: Current page\n- msgsTotal: Number of pages\n- satellites: Array of satellite objects with the following attributes:\n   - prn: Satellite PRN number\n   - elevation: Elevation in degrees\n   - azimuth: Azimuth in degrees\n   - snr: Signal to Noise Ratio (higher is better)\n- valid: Indicates if the checksum is okay\n\n\nVTG - vector track and speed over ground\n---\n\nThe parsed object will have the following attributes:\n\n- type: \"VTG\"\n- track: Track in degrees\n- speed: Speed over ground in km/h\n- faa: The FAA mode, introduced with NMEA 2.3\n- valid: Indicates if the checksum is okay\n\nZDA - UTC day, month, and year, and local time zone offset\n---\n\nThe parsed object will have the following attributes:\n\n- type: \"ZDA\"\n- time: The time given as a JavaScript Date object\n\nHDT - Heading\n---\n\nThe parsed object will have the following attributes:\n\n- type: \"HDT\"\n- heading: Heading in degrees\n- trueNorth: Indicates heading relative to True North\n- valid: Indicates if the checksum is okay\n\nGST - Position error statistics\n---\n\nThe parsed object will have the following attributes:\n\n- type: \"GST\"\n- time: The time given as a JavaScript Date object\n- rms: RMS value of the pseudorange residuals; includes carrier phase residuals during periods of RTK (float) and RTK (fixed)\n- ellipseMajor: Error ellipse semi-major axis 1 sigma error, in meters\n- ellipseMinor: Error ellipse semi-minor axis 1 sigma error, in meters\n- ellipseOrientation: Error ellipse orientation, degrees from true north\n- latitudeError: Latitude 1 sigma error, in meters\n- longitudeError: Longitude 1 sigma error, in meters\n- heightError: Height 1 sigma error, in meters\n- valid: Indicates if the checksum is okay\n\nGPS State\n===\nIf the streaming API is not needed, but a solid state of the system, the `gps.state` object can be used. It has the following properties:\n\n- time: Current time\n- lat: Latitude\n- lon: Longitude\n- alt: Altitude\n- satsActive: Array of active satellites\n- speed: Speed over ground in km/h\n- track: Track in degrees\n- satsVisible: Array of all visible satellites\n\nAdding new protocols is a matter of minutes. If you need a protocol which isn't implemented, I'm happy to see a pull request or a new ticket.\n\n\nTroubleshooting\n===\nIf you don't get valid position information after turning on the receiver, chances are high you simply have to wait as it takes some [time to first fix](https://en.wikipedia.org/wiki/Time_to_first_fix).\n\nFunctions\n===\n\nGPS.js comes with a few static functions, which helps working with geo-coordinates.\n\nGPS.Parse(line)\n---\nParses a single line and returns the resulting object, in case the callback system isn't needed/wanted\n\nGPS.Distance(latFrom, lonFrom, latTo, lonTo)\n---\nCalculates the distance between two geo-coordinates using Haversine formula\n\nGPS.TotalDistance(points)\n---\nCalculates the length of a traveled route, given as an array of {lat: x, lon: y} point objects\n\nGPS.Heading(latFrom, lonFrom, latTo, lonTo)\n---\nCalculates the angle from one coordinate to another. Heading is represented as windrose coordinates (N=0, E=90, S=189, W=270). The result can be used as the argument of [angles](https://github.com/infusion/Angles.js) `compass()` method:\n\n```javascript\nvar angles = require('angles');\nconsole.log(angles.compass(GPS.Heading(50, 10, 51, 9))); // will return x â { N, S, E, W, NE, ... }\n```\n\n\nUsing GPS.js with the browser\n===\nThe use cases should be rare to parse NMEA directly inside the browser, but it works too.\n\n```html\n<script src=\"gps.js\"></script>\n<script>\n   var gps = new GPS;\n   gps.update('...');\n</script>\n```\n\nTesting\n===\nIf you plan to enhance the library, make sure you add test cases and all the previous tests are passing. You can test the library with\n\n```\nnpm test\n```\n\nCopyright and licensing\n===\nCopyright (c) 2016, [Robert Eisele](https://www.xarg.org/)\nDual licensed under the MIT or GPL Version 2 licenses.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/infusion/GPS.js.git"
  },
  "scripts": {
    "test": "mocha tests/*.js"
  },
  "title": "gps.js",
  "types": "gps.d.ts",
  "version": "0.5.3"
}
